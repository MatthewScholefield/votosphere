{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/IntroPage.js","api.js","components/CreatePollPage.js","components/PollPage.js","utils.js","components/ViewPollPage.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","_this","this","react_default","a","createElement","Menu","stackable","size","Container","Item","href","Image","src","style","height","position","name","key","map","_ref","Route","render","_ref2","history","onClick","e","_ref3","push","setState","activeItem","active","content","Component","Social","fake","props","icon","Icon","color","inner","target","rel","Popup","trigger","Footer","attached","backgroundColor","alignContent","textAlign","Grid","centered","padding","Column","mobile","tablet","computer","Header","Footer_Social","IntroPage","dist","blur","bgImage","bgImageAlt","strength","text","as","inverted","className","Button","primary","padded","Row","columns","Subheader","uploadJson","json","fetch","method","mode","cache","credentials","headers","Content-Type","redirect","referrer","body","JSON","stringify","then","r","uri","replace","getJson","id","CreatePollPage","state","title","description","numFields","fieldNames","agreed","submitting","pollUrl","loading","shuffle","isExtraDescOpen","extraDesc","_this2","Segment","fluid","raised","Form","Field","control","Input","value","onChange","label","placeholder","TextArea","Group","inline","Checkbox","event","data","checked","concat","i","labelPosition","length","splice","Object","objectSpread","defineProperty","fields","initialCounts","assign","apply","toConsumableArray","k","extraDescriptions","descs","values","indices","keys","counts","numResponses","countsId","disabled","InputMeter","build","settings","start","min","max","step","marginBottom","PollPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","choices","answeredIds","handleRadioUpdate","field","amount","submitForm","cookies","set","join","expires","Date","renderField","selector","PollPage_InputMeter","val","desc","fontSize","react_markdown_default","source","Cookies","_this3","get","split","queryString","parse","location","search","undefined","j","Math","floor","random","_this4","includes","listStylePosition","_ref4","ViewPollPage","countsData","badId","idText","updateData","catch","renderPollView","urlId","maxCount","colors","Progress","progress","total","renderAskIdView","error","type","action","App","HashRouter","Navbar_Navbar","exact","path","component","Footer_Footer","Boolean","window","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a42cd066.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Container, Image, Menu} from 'semantic-ui-react';\nimport {Route} from \"react-router-dom\";\n\n\nexport default class Navbar extends Component {\n    render() {\n        return <Menu stackable size='massive'>\n            <Container>\n                <Menu.Item href='#'>\n                    <Image src='images/logo.png' style={{height: 30}}/>\n                </Menu.Item>\n                <Menu.Item href='#'>\n                    Votosphere\n                </Menu.Item>\n\n                <Menu.Menu position='right'>\n                    {[\n                        {name: '+', key: '/createPoll'},\n                        {name: 'View', key: 'viewPoll'}\n                    ].map(({name, key}) => (\n                        <Route key={key} render={({history}) => (\n                            <Menu.Item\n                                onClick={(e, {name}) => {\n                                    history.push(key);\n                                    this.setState({activeItem: name});\n                                }}\n                                active={false}\n                                name={key}\n                                content={name}\n                            />\n                        )}/>\n                    ))}\n                </Menu.Menu>\n            </Container>\n        </Menu>\n            ;\n    }\n}\n","import React, {Component} from 'react';\nimport {Container, Grid, Header, Icon, Menu, Popup} from 'semantic-ui-react';\n\n\nclass Social extends Component {\n    render() {\n        const fake = this.props.href === \"#\";\n        const icon = <Icon name={this.props.name} size='huge' style={{color: '#777777'}}/>;\n        const inner = fake ? icon : <a href={this.props.href} target='_blank' rel='noopener noreferrer'>{icon}</a>;\n        return fake ? (\n            <Popup trigger={inner} content={\"We don't actually have a page on \" + this.props.name + \" yet.\"}/>\n        ) : inner;\n    }\n}\n\nexport default class Footer extends Component {\n    render() {\n        return [\n            <div style={{height: 40}}/>,\n            <Menu attached='bottom' style={{backgroundColor: '#F5F5F5'}}>\n                <Container style={{alignContent: 'center', textAlign: 'center'}}>\n                    <Grid centered stackable style={{padding: 40}}>\n                        <Grid.Column mobile={16} tablet={4} computer={4}>\n                            <Header>\n                                About Us\n                            </Header>\n                            <p>\n                                We are a platform for creating quick, simple polls. You can find more info about the\n                                project on GitHub.\n                            </p>\n                        </Grid.Column>\n                        <Grid.Column mobile={16} tablet={4} computer={4}>\n                            <Header>\n                                Social\n                            </Header>\n                            <Social name='twitter' href=\"#\"/>\n                            <Social name='facebook' href=\"#\"/>\n                            <Social name='github' href='https://github.com/matthewscholefield/Votosphere'/>\n                            <Social name='youtube' href='#'/>\n                        </Grid.Column>\n                        <Grid.Column mobile={16} tablet={4} computer={4}>\n                            <Header>\n                                More Info\n                            </Header>\n                            <p>Votosphere is a simple platform to create polls. The description is rendered as\n                                markdown.</p>\n                            <p>© 2018 Matthew Scholefield</p>\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </Menu>\n        ];\n    }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Button, Container, Grid, Header, Icon} from 'semantic-ui-react';\nimport {Route} from \"react-router-dom\";\nimport {Parallax} from 'react-parallax';\n\n\nexport default class IntroPage extends Component {\n    render() {\n        return <div>\n            <Parallax\n                blur={0}\n                bgImage={'images/bg.jpg'}\n                bgImageAlt=\"Background\"\n                strength={200}\n            >\n                <Container text style={{color: '#fffffff'}}>\n                    <div key='spacer' style={{height: 100}}/>\n                    <Header as='h1' inverted className='white'>Votosphere</Header>\n                    <p className='inverted'>\n                        A simple poll creator.\n                    </p>\n                    <Route render={({history}) =>\n                        <Button primary onClick={() => history.push('/createPoll')}>Create a Poll </Button>\n                    }/>\n                    <div key='spacer' style={{height: 100}}/>\n                </Container>\n            </Parallax>\n            <div style={{height: 40}}/>\n            <Container text>\n                <Grid padded>\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            <Header as='h2' icon>\n                                <Icon name='users'/>\n                                Open Source\n                                <Header.Subheader>Want to learn more? You can view all of the source code on\n                                    GitHub.</Header.Subheader>\n                            </Header>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Header as='h2' icon>\n                                <Icon name='tv'/>\n                                Simple\n                                <Header.Subheader>Created with ease of use in mind, you can make new polls in a matter\n                                    of\n                                    seconds.</Header.Subheader>\n                            </Header>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Header as='h2' icon>\n                                <Icon name='check'/>\n                                Refreshing\n                                <Header.Subheader>A UI that gets out of your way while still looking like it's from this\n                                    decade.</Header.Subheader>\n                            </Header>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        </div>;\n    }\n}\n","/**\n * Uploads and returns id of new json\n * @param json Input data\n * @returns {Promise<string>} Id\n */\nexport function uploadJson(json) {\n    return fetch('https://api.myjson.com/bins', {\n        method: \"POST\", mode: \"cors\", cache: \"no-cache\", credentials: \"same-origin\",\n        headers: {\"Content-Type\": \"application/json; charset=utf-8\"},\n        redirect: \"follow\", referrer: \"no-referrer\", body: JSON.stringify(json),\n    }).then(r=>r.json()).then(r=>r.uri.replace(\"https://api.myjson.com/bins/\", \"\"));\n}\n\n/**\n * Updates an existing json\n * @param id Corresponds to existing id\n * @param json New data to replace the current version with\n * @returns {Promise<any>} Response\n */\nexport function updateJson(id, json) {\n    return fetch('https://api.myjson.com/bins/' + id, {\n        method: \"PUT\", mode: \"cors\", cache: \"no-cache\", credentials: \"same-origin\",\n        headers: {\"Content-Type\": \"application/json; charset=utf-8\"},\n        redirect: \"follow\", referrer: \"no-referrer\", body: JSON.stringify(json),\n    }).then(r=>r.json());\n}\n\n/**\n * Return a json corresponding to the given id\n * @param id Id of json\n * @returns {Promise<any>} Json data\n */\nexport function getJson(id) {\n    return fetch('https://api.myjson.com/bins/' + id, {\n        method: \"GET\", mode: \"cors\", cache: \"no-cache\", credentials: \"same-origin\",\n        headers: {\"Content-Type\": \"application/json; charset=utf-8\"},\n        redirect: \"follow\", referrer: \"no-referrer\",\n    }).then(r=>r.json());\n}\n","import React, {Component} from \"react\";\nimport {\n    Button,\n    Checkbox,\n    Container,\n    Form,\n    Grid,\n    Header,\n    Input,\n    Popup,\n    Segment,\n    TextArea,\n    Label\n} from \"semantic-ui-react\";\nimport './App.css';\nimport {uploadJson} from '../api';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Route} from \"react-router-dom\";\n\n\nexport default class CreatePollPage extends Component {\n    state = {\n        title: '',\n        description: '',\n        numFields: 1,\n        fieldNames: [],\n        agreed: false,\n        submitting: false,\n        pollUrl: '',\n        loading: false,\n        shuffle: false,\n        isExtraDescOpen: {},\n        extraDesc: {}\n    };\n\n    render() {\n        return (\n            <Container>\n                <div style={{height: 40}}/>\n                <Header>Create Poll</Header>\n                <Grid centered>\n                    <Grid.Row>\n                        <Grid.Column computer={6} tablet={12} mobile={16}>\n                            <Segment fluid raised style={{padding: 20}}>\n                                <Form>\n                                    <Form.Field control={Input} value={this.state.title}\n                                                onChange={e => this.setState({title: e.target.value})}\n                                                label='Title' placeholder='Title...'/>\n                                    <Form.Field control={TextArea} value={this.state.description}\n                                                onChange={e => this.setState({description: e.target.value})}\n                                                label='Description' placeholder='Description...'/>\n                                    <Form.Group inline>\n                                        <label>Poll Options</label>\n                                    </Form.Group>\n                                    <Form.Group inline>\n                                        <Checkbox label='Shuffle'\n                                                  onChange={(event, data) => {\n                                                      this.setState({shuffle: data.checked})\n                                                  }}\n                                        />\n                                    </Form.Group>\n                                    {\n                                        this.state.fieldNames.concat(['']).map((name, i) => (\n                                            <Form.Field key={i}>\n                                                <label>{'Option ' + (i + 1)}</label>\n                                                <Form.Field>\n                                                    <Input\n                                                    value={name}\n                                                    label={<Button\n                                                        icon='ellipsis horizontal'\n                                                        onClick={event => {\n                                                            this.setState(state => {\n                                                                const isExtraDescOpen = this.state.isExtraDescOpen;\n                                                                isExtraDescOpen[i] = !isExtraDescOpen[i] || !!this.state.extraDesc[i];\n                                                                return {\n                                                                    isExtraDescOpen: isExtraDescOpen\n                                                                };\n                                                            });\n                                                        }}/>}\n                                                    labelPosition='right'\n                                                    placeholder='New poll option...'\n                                                    onChange={(event) => {\n                                                        const text = event.target.value;\n\n                                                        this.setState(state => {\n                                                            if (text.length > 0) {\n                                                                state.fieldNames[i] = text;\n                                                            } else {\n                                                                state.fieldNames.splice(i);\n                                                            }\n                                                            return state;\n                                                        })\n                                                    }}/>\n                                                </Form.Field>\n                                                <Form.Field key={2*i}>\n\n                                                {\n                                                    !this.state.isExtraDescOpen[i] ? <div/> : <Form.Field control={TextArea}\n                                                                onChange={e => {\n                                                                    const text = e.target.value;\n                                                                    this.setState(state => ({extraDesc: {...state.extraDesc, [i]: text}}));\n                                                                }}\n                                                                placeholder='Option Description...' value={this.state.extraDesc[i]}/>\n                                                }\n                                                </Form.Field>\n\n                                            </Form.Field>\n                                        ))\n                                    }\n\n                                    <Form.Field>\n                                        <Popup trigger={\n                                            <Checkbox label='I agree to the Terms and Conditions'\n                                                      onChange={(event, data) => {\n                                                          this.setState({agreed: data.checked})\n                                                      }}\n                                            />}\n                                               content='You agree to use this service in a way that breaks no laws and is not evil.'/>\n                                    </Form.Field>\n                                    <Route render={({history}) => (\n                                        <Form.Field>\n                                            <Button onClick={() => {\n                                                this.setState({loading: true});\n                                                const fields = this.state.fieldNames;\n                                                const initialCounts = Object.assign({}, ...fields.map(k => ({[k]: 0})));\n                                                const extraDescriptions = {};\n                                                const descs = Object.values(this.state.extraDesc);\n                                                const indices = Object.keys(this.state.extraDesc);\n                                                for (let i = 0; i < descs.length; ++i) {\n                                                    extraDescriptions[this.state.fieldNames[indices[i]]] = descs[i];\n                                                }\n                                                uploadJson({\n                                                    counts: initialCounts,\n                                                    numResponses: 0\n                                                }).then(countsId => uploadJson({\n                                                    title: this.state.title,\n                                                    description: this.state.description,\n                                                    extraDescriptions: extraDescriptions,\n                                                    fields: this.state.fieldNames,\n                                                    counts: countsId,\n                                                    shuffle: this.state.shuffle\n                                                })).then(id => {\n                                                    history.push(\"/poll?id=\" + id);\n                                                });\n                                            }} disabled={!this.state.agreed || this.state.loading || (\n                                                !this.state.title.length > 0 || !this.state.fieldNames.length > 0\n                                            )}>\n                                                Create\n                                            </Button>\n                                        </Form.Field>\n                                    )}/>\n                                </Form>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport queryString from \"query-string\";\nimport './App.css';\nimport {getJson, updateJson} from '../api';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Button, Container, Form, Grid, Header, Radio, Segment} from 'semantic-ui-react';\nimport {Route} from \"react-router-dom\";\nimport ReactMarkdown from 'react-markdown';\nimport Cookies from \"universal-cookie\";\nimport {shuffle} from \"../utils\";\nimport {Slider} from 'react-semantic-ui-range'\n\n\nclass InputMeter extends Component {\n    render() {\n        return <Slider color=\"red\" inverted={false}\n                       settings={{\n                           start: 0.5,\n                           min: 0,\n                           max: 1,\n                           step: 0.01,\n                           onChange: (value) => {\n                               this.props.onChange(value)\n                           }\n                       }} style={{marginBottom: 14}}/>;\n    }\n}\n\n\nexport default class PollPage extends Component {\n    state = {\n        title: \"\",\n        description: \"\",\n        extraDescriptions: {},\n        fields: [],\n        choices: {},\n        counts: \"\",\n        id: \"\",\n        answeredIds: []\n    };\n\n    constructor(props) {\n        super(props);\n        this.cookies = new Cookies();\n    }\n\n    handleRadioUpdate = (field, amount) => {\n        this.setState(({choices}) => {\n            choices[field] = amount;\n            return {choices: choices};\n        })\n    };\n\n    submitForm = (history) => {\n        const choices = this.state.choices;\n        getJson(this.state.counts).then(\n            data => updateJson(this.state.counts, {\n                counts: Object.assign({}, ...Object.keys(choices).map(k => ({[k]: data.counts[k] + choices[k]}))),\n                numResponses: data.numResponses + 1\n            })\n        ).then(r => {\n            const answeredIds = this.state.answeredIds;\n            answeredIds.push(this.state.id);\n            this.cookies.set('answeredIds', answeredIds.join(':'), {expires: new Date(2145916800000)})\n            history.push(\"/viewPoll?id=\" + this.state.id);\n        });\n    };\n\n    componentWillMount() {\n        this.setState({answeredIds: (this.cookies.get('answeredIds') || '').split(':')});\n        const id = queryString.parse(this.props.location.search).id;\n        if (id !== undefined) {\n            getJson(id).then(json => {\n                if (json.shuffle) {\n                    shuffle(json.fields);\n                }\n                this.setState({\n                    title: json.title,\n                    description: json.description,\n                    extraDescriptions: json.extraDescriptions,\n                    fields: json.fields,\n                    counts: json.counts,\n                    id: id\n                });\n            });\n        }\n    }\n\n    renderField = field => {\n        const selector = <InputMeter amount={this.state.choices[field] || 0.5}\n                                     onChange={val => this.handleRadioUpdate(field, val)}/>;\n        const desc = this.state.extraDescriptions[field];\n        if (desc) {\n            return [\n                <Form.Field><label style={{fontSize: '1.2rem'}}>{field}</label></Form.Field>,\n                <p><ReactMarkdown source={desc}/></p>,\n                selector\n            ];\n        } else {\n            return [<Form.Group inline key={field}>\n                <label>{field + ':'}</label>\n            </Form.Group>, selector]\n        }\n    };\n\n    render() {\n        if (this.state.id && this.state.answeredIds.includes(this.state.id)) {\n            return <Route render={({history}) => {\n                history.push(\"/viewPoll?id=\" + this.state.id);\n                return <div/>;\n            }}/>\n        }\n        return (\n            <Container>\n                <div style={{height: 40}}/>\n                <Header>{this.state.title || \"Respond to Poll\"}</Header>\n                <div style={{listStylePosition: 'inside'}}>\n                    <ReactMarkdown source={this.state.description || \"Respond to a Poll from a link\"}/>\n                </div>\n                <div style={{height: 20}}/>\n                <Grid centered>\n                    <Grid.Row>\n                        <Grid.Column computer={6} tablet={12} mobile={16}>\n\n                            <Segment fluid raised style={{padding: 20}}>\n                                <Form>\n                                    {\n                                        this.state.fields.map(field => (\n                                            this.renderField(field)\n                                        ))\n                                    }\n                                    <Route render={({history}) => (\n                                        <Form.Field control={Button}\n                                                    onClick={() => this.submitForm(history)}\n                                                    disabled={Object.keys(this.state.choices).length !== this.state.fields.length}\n                                        >\n                                            Continue\n                                        </Form.Field>\n                                    )}/>\n                                </Form>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n","export function shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n","import React, {Component} from \"react\";\nimport queryString from \"query-string\";\nimport './App.css';\nimport {getJson} from '../api';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Button, Container, Grid, Header, Icon, Input, Progress, Segment} from 'semantic-ui-react';\nimport {Route} from \"react-router-dom\";\nimport ReactMarkdown from 'react-markdown';\n\n\nexport default class ViewPollPage extends Component {\n    state = {\n        title: \"\",\n        description: \"\",\n        fields: [],\n        countsData: {counts: {}},\n        id: \"\",\n        badId: false,\n        loading: true,\n        idText: \"\"\n    };\n\n    updateData = id => {\n        id = id || \"\";\n        this.setState({loading: true, id: id, badId: false});\n\n        if (id.length === 0) {\n            this.setState({loading: false});\n            return;\n        }\n\n        getJson(id).then(json => {\n            if (json.fields === undefined || json.counts === undefined) {\n                this.setState({badId: true, id: \"\"});\n            }\n            this.setState({\n                title: json.title,\n                description: json.description,\n                fields: json.fields,\n            });\n            return getJson(json.counts);\n        }).then(data => {\n            this.setState({countsData: data, loading: false})\n        }).catch(e => {\n            this.setState({badId: true, loading: false, id: \"\"})\n        });\n    };\n    renderPollView = () => {\n        const urlId = queryString.parse(this.props.location.search).id;\n        if (urlId !== this.state.id) {\n            this.updateData(urlId);\n        }\n        const counts = this.state.countsData.counts || {};\n        const maxCount = Object.keys(counts).length === 0 ? 1 : Math.max(...Object.values(counts));\n        const colors = [\n            'orange', 'yellow', 'olive', 'teal', 'blue',\n            'violet', 'purple', 'pink', 'brown', 'grey', 'black'\n        ];  // 'red', 'green' Too misleading\n        if (this.state.fields === undefined) {\n            return [];\n        }\n        return [\n            this.state.fields.map((field, i) => {\n                return <Progress progress='value' key={field}\n                                 value={counts[field] || 0} total={maxCount}\n                                 color={colors[i % colors.length]}>{field}</Progress>\n            }),\n            <Button onClick={() => this.updateData(this.state.id)} icon labelPosition='right'\n                    disabled={this.state.loading}>\n                Refresh\n                <Icon name='refresh'/>\n            </Button>\n        ];\n    };\n    renderAskIdView = () => {\n        return <div>\n            <p>Enter poll id:</p>\n            <Input fluid error={this.state.badId} type='text' value={this.state.idText} action\n                   placeholder='ie. pc9z1...' onChange={e => this.setState({idText: e.target.value})}>\n                <input/><Route render={({history}) => <Button onClick={() => {\n                history.push(\"/viewPoll?id=\" + this.state.idText);\n                this.updateData(this.state.idText);\n            }}>Submit</Button>}/>\n            </Input>\n        </div>;\n    };\n\n    componentWillMount() {\n        this.updateData(queryString.parse(this.props.location.search).id);\n    }\n\n    render() {\n        return (\n            <Container>\n                <div style={{height: 40}}/>\n                <Header>{this.state.title || \"View Poll\"}</Header>\n                <div style={{listStylePosition: 'inside'}}>\n                    <ReactMarkdown source={this.state.description || \"View stats on an existing poll\"}/>\n                </div>\n                <div style={{height: 20}}/>\n                <Grid centered>\n                    <Grid.Row>\n                        <Grid.Column computer={6} tablet={12} mobile={16}>\n                            <Segment raised style={{padding: 20}}>\n                                {this.state.id ? this.renderPollView() : this.renderAskIdView()}\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\nimport {HashRouter, Route} from \"react-router-dom\";\nimport IntroPage from \"./IntroPage\";\nimport CreatePollPage from './CreatePollPage';\nimport PollPage from './PollPage';\nimport ViewPollPage from './ViewPollPage';\n\n\nexport default class App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <div className=\"App Site\">\n                    <div className=\"Site-content\">\n                        <div className=\"App-header\">\n                            <Navbar key='navbar'/>\n                        </div>\n                        <div className=\"main\">\n                            <Route key={1} exact path=\"/\" component={IntroPage}/>\n                            <Route key={2} exact path=\"/createPoll\" component={CreatePollPage}/>\n                            <Route key={3} exact path=\"/poll\" component={PollPage}/>\n                            <Route key={4} exact path=\"/viewPoll\" component={ViewPollPage}/>\n                        </div>\n                    </div>\n                    <Footer key='footer'/>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}