{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/IntroPage.js","api.js","components/CreatePollPage.js","components/PollPage.js","components/ViewPollPage.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","_this","this","react_default","a","createElement","Menu","stackable","size","Container","Item","href","Image","src","style","height","position","name","key","map","_ref","Route","render","_ref2","history","onClick","e","_ref3","push","setState","activeItem","active","content","Component","Social","fake","props","icon","Icon","color","inner","target","rel","Popup","trigger","Footer","attached","backgroundColor","alignContent","textAlign","Grid","centered","padding","Column","mobile","tablet","computer","Header","Footer_Social","IntroPage","dist","blur","bgImage","bgImageAlt","strength","text","as","inverted","className","Button","primary","padded","Row","columns","Subheader","uploadJson","json","fetch","method","mode","cache","credentials","headers","Content-Type","redirect","referrer","body","JSON","stringify","then","r","uri","replace","getJson","id","CreatePollPage","state","title","description","numFields","fieldNames","agreed","submitting","pollUrl","loading","_this2","Segment","fluid","raised","Form","Field","control","Input","onChange","value","label","placeholder","TextArea","Group","inline","concat","i","event","length","splice","Checkbox","data","checked","fields","counts","Object","assign","apply","toConsumableArray","k","defineProperty","numResponses","countsId","disabled","PollPage","choices","handleRadioUpdate","field","amount","undefined","queryString","parse","location","search","_this3","listStylePosition","react_markdown_default","source","Array","keys","Radio","ViewPollPage","countsData","badId","idText","updateData","catch","renderPollView","urlId","maxCount","Math","max","values","colors","Progress","progress","total","labelPosition","renderAskIdView","error","type","action","App","HashRouter","Navbar_Navbar","exact","path","component","Footer_Footer","Boolean","window","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAKqBA,mLACR,IAAAC,EAAAC,KACL,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,KAAK,WACxBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CAAWC,KAAK,KACZR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,IAAI,kBAAkBC,MAAO,CAACC,OAAQ,OAEjDZ,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CAAWC,KAAK,KAAhB,cAIAR,EAAAC,EAAAC,cAACC,EAAA,EAAKA,KAAN,CAAWU,SAAS,SACf,CACG,CAACC,KAAM,IAAKC,IAAK,eACjB,CAACD,KAAM,OAAQC,IAAK,aACtBC,IAAI,SAAAC,GAAA,IAAEH,EAAFG,EAAEH,KAAMC,EAARE,EAAQF,IAAR,OACFf,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOH,IAAKA,EAAKI,OAAQ,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OACrBrB,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CACIe,QAAS,SAACC,EAADC,GAAe,IAAVV,EAAUU,EAAVV,KACVO,EAAQI,KAAKV,GACbjB,EAAK4B,SAAS,CAACC,WAAYb,KAE/Bc,QAAQ,EACRd,KAAMC,EACNc,QAASf,mBAxBLgB,iDCD9BC,mLAEE,IAAMC,EAA2B,MAApBjC,KAAKkC,MAAMzB,KAClB0B,EAAOlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMrB,KAAMf,KAAKkC,MAAMnB,KAAMT,KAAK,OAAOM,MAAO,CAACyB,MAAO,aAC/DC,EAAQL,EAAOE,EAAOlC,EAAAC,EAAAC,cAAA,KAAGM,KAAMT,KAAKkC,MAAMzB,KAAM8B,OAAO,SAASC,IAAI,uBAAuBL,GACjG,OAAOF,EACHhC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,QAASJ,EAAOR,QAAS,oCAAsC9B,KAAKkC,MAAMnB,KAAO,UACxFuB,SAPSP,aAWAY,mLAEb,MAAO,CACH1C,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACC,OAAQ,MACrBZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMwC,SAAS,SAAShC,MAAO,CAACiC,gBAAiB,YAC7C5C,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAWK,MAAO,CAACkC,aAAc,SAAUC,UAAW,WAClD9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAMC,UAAQ,EAAC5C,WAAS,EAACO,MAAO,CAACsC,QAAS,KACtCjD,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,CAAaC,OAAQ,GAAIC,OAAQ,EAAGC,SAAU,GAC1CrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,iBAGAtD,EAAAC,EAAAC,cAAA,qHAKJF,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,CAAaC,OAAQ,GAAIC,OAAQ,EAAGC,SAAU,GAC1CrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,eAGAtD,EAAAC,EAAAC,cAACqD,EAAD,CAAQzC,KAAK,UAAUN,KAAK,MAC5BR,EAAAC,EAAAC,cAACqD,EAAD,CAAQzC,KAAK,WAAWN,KAAK,MAC7BR,EAAAC,EAAAC,cAACqD,EAAD,CAAQzC,KAAK,SAASN,KAAK,qDAC3BR,EAAAC,EAAAC,cAACqD,EAAD,CAAQzC,KAAK,UAAUN,KAAK,OAEhCR,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,CAAaC,OAAQ,GAAIC,OAAQ,EAAGC,SAAU,GAC1CrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,kBAGAtD,EAAAC,EAAAC,cAAA,sGAEAF,EAAAC,EAAAC,cAAA,sDA/BQ4B,wCCPf0B,mLAEb,OAAOxD,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAACuD,EAAA,SAAD,CACIC,KAAM,EACNC,QAAS,gBACTC,WAAW,aACXC,SAAU,KAEV7D,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAWwD,MAAI,EAACnD,MAAO,CAACyB,MAAO,aAC3BpC,EAAAC,EAAAC,cAAA,OAAKa,IAAI,SAASJ,MAAO,CAACC,OAAQ,OAClCZ,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAQS,GAAG,KAAKC,UAAQ,EAACC,UAAU,SAAnC,cACAjE,EAAAC,EAAAC,cAAA,KAAG+D,UAAU,YAAb,0BAGAjE,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAQ,SAAAF,GAAA,IAAEI,EAAFJ,EAAEI,QAAF,OACXrB,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAQC,SAAO,EAAC7C,QAAS,kBAAMD,EAAQI,KAAK,iBAA5C,qBAEJzB,EAAAC,EAAAC,cAAA,OAAKa,IAAI,SAASJ,MAAO,CAACC,OAAQ,SAG1CZ,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACC,OAAQ,MACrBZ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAWwD,MAAI,GACX9D,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAMqB,QAAM,GACRpE,EAAAC,EAAAC,cAAC6C,EAAA,EAAKsB,IAAN,CAAUC,QAAS,GACftE,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,KACIlD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAQS,GAAG,KAAK7B,MAAI,GAChBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMrB,KAAK,UADf,cAGId,EAAAC,EAAAC,cAACoD,EAAA,EAAOiB,UAAR,6EAIRvE,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,KACIlD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAQS,GAAG,KAAK7B,MAAI,GAChBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMrB,KAAK,OADf,SAGId,EAAAC,EAAAC,cAACoD,EAAA,EAAOiB,UAAR,2FAKRvE,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,KACIlD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAQS,GAAG,KAAK7B,MAAI,GAChBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMrB,KAAK,UADf,aAGId,EAAAC,EAAAC,cAACoD,EAAA,EAAOiB,UAAR,oGA9COzC,0ECHhC,SAAS0C,EAAWC,GACvB,OAAOC,MAAM,8BAA+B,CACxCC,OAAQ,OAAQC,KAAM,OAAQC,MAAO,WAAYC,YAAa,cAC9DC,QAAS,CAACC,eAAgB,mCAC1BC,SAAU,SAAUC,SAAU,cAAeC,KAAMC,KAAKC,UAAUZ,KACnEa,KAAK,SAAAC,GAAC,OAAEA,EAAEd,SAAQa,KAAK,SAAAC,GAAC,OAAEA,EAAEC,IAAIC,QAAQ,+BAAgC,MAsBxE,SAASC,EAAQC,GACpB,OAAOjB,MAAM,+BAAiCiB,EAAI,CAC9ChB,OAAQ,MAAOC,KAAM,OAAQC,MAAO,WAAYC,YAAa,cAC7DC,QAAS,CAACC,eAAgB,mCAC1BC,SAAU,SAAUC,SAAU,gBAC/BI,KAAK,SAAAC,GAAC,OAAEA,EAAEd,aC7BImB,6MACjBC,MAAQ,CACJC,MAAO,GACPC,YAAa,GACbC,UAAW,EACXC,WAAY,GACZC,QAAQ,EACRC,YAAY,EACZC,QAAS,GACTC,SAAS,2EAGJ,IAAAC,EAAAvG,KACL,OACIC,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACC,OAAQ,MACrBZ,EAAAC,EAAAC,cAACoD,EAAA,EAAD,oBACAtD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAMC,UAAQ,GACVhD,EAAAC,EAAAC,cAAC6C,EAAA,EAAKsB,IAAN,KACIrE,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,CAAaG,SAAU,EAAGD,OAAQ,GAAID,OAAQ,IAC1CnD,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAASC,OAAK,EAACC,QAAM,EAAC9F,MAAO,CAACsC,QAAS,KACnCjD,EAAAC,EAAAC,cAACwG,EAAA,EAAD,KACI1G,EAAAC,EAAAC,cAACwG,EAAA,EAAKC,MAAN,CAAYC,QAASC,IAAOC,SAAU,SAAAvF,GAAC,OAAI+E,EAAK5E,SAAS,CAACoE,MAAOvE,EAAEe,OAAOyE,SAC9DC,MAAM,QAAQC,YAAY,aACtCjH,EAAAC,EAAAC,cAACwG,EAAA,EAAKC,MAAN,CAAYC,QAASM,IACTJ,SAAU,SAAAvF,GAAC,OAAI+E,EAAK5E,SAAS,CAACqE,YAAaxE,EAAEe,OAAOyE,SACpDC,MAAM,cAAcC,YAAY,mBAC5CjH,EAAAC,EAAAC,cAACwG,EAAA,EAAKS,MAAN,CAAYC,QAAM,GACdpH,EAAAC,EAAAC,cAAA,8BAGAH,KAAK8F,MAAMI,WAAWoB,OAAO,CAAC,KAAKrG,IAAI,SAACF,EAAMwG,GAAP,OACnCtH,EAAAC,EAAAC,cAACwG,EAAA,EAAKC,MAAN,CAAY5F,IAAKuG,EAAGV,QAASC,IAAOG,MAAO,WAAaM,EAAI,GAChDP,MAAOjG,EACPmG,YAAY,qBACZH,SAAU,SAACS,GACP,IAAMzD,EAAOyD,EAAMjF,OAAOyE,MAE1BT,EAAK5E,SAAS,SAAAmE,GAMV,OALI/B,EAAK0D,OAAS,EACd3B,EAAMI,WAAWqB,GAAKxD,EAEtB+B,EAAMI,WAAWwB,OAAOH,GAErBzB,SAMnC7F,EAAAC,EAAAC,cAACwG,EAAA,EAAKC,MAAN,KACI3G,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,QACHzC,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CAAUV,MAAM,sCACNF,SAAU,SAACS,EAAOI,GACdrB,EAAK5E,SAAS,CAACwE,OAAQyB,EAAKC,aAGvC/F,QAAQ,iFAEnB7B,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAQ,SAAAF,GAAA,IAAEI,EAAFJ,EAAEI,QAAF,OACXrB,EAAAC,EAAAC,cAACwG,EAAA,EAAKC,MAAN,KACI3G,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAQ5C,QAAS,WACbgF,EAAK5E,SAAS,CAAC2E,SAAS,IACxB,IAAMwB,EAASvB,EAAKT,MAAMI,WAE1BzB,EAAW,CACPsD,OAFkBC,OAAOC,OAAPC,MAAAF,OAAM,CAAQ,IAARV,OAAAU,OAAAG,EAAA,EAAAH,CAAeF,EAAO7G,IAAI,SAAAmH,GAAC,OAAAJ,OAAAK,EAAA,EAAAL,CAAA,GAAOI,EAAI,QAG9DE,aAAc,IACf/C,KAAK,SAAAgD,GAAQ,OAAI9D,EAAW,CAC3BsB,MAAOQ,EAAKT,MAAMC,MAClBC,YAAaO,EAAKT,MAAME,YACxB8B,OAAQvB,EAAKT,MAAMI,WACnB6B,OAAQQ,MACRhD,KAAK,SAAAK,GACLtE,EAAQI,KAAK,YAAckE,MAEhC4C,UAAWjC,EAAKT,MAAMK,QAAUI,EAAKT,MAAMQ,UACzCC,EAAKT,MAAMC,MAAM0B,OAAS,IAAMlB,EAAKT,MAAMI,WAAWuB,OAAS,GAhBpE,2BA7DA1F,wDCEvB0G,6MAEjB3C,MAAQ,CACJC,MAAO,GACPC,YAAa,GACb8B,OAAQ,GACRY,QAAS,GACTX,OAAQ,GACRnC,GAAI,MAER+C,kBAAoB,SAAC3B,EAAO4B,EAAOC,QACjBC,IAAV9B,GACAjH,EAAK4B,SAAS,SAAAT,GAAe,IAAbwH,EAAaxH,EAAbwH,QAEZ,OADAA,EAAQE,GAASC,EACV,CAACH,QAASA,0FAKR,IAAAnC,EAAAvG,KACX4F,EAAKmD,IAAYC,MAAMhJ,KAAKkC,MAAM+G,SAASC,QAAQtD,QAC9CkD,IAAPlD,GACAD,EAAQC,GAAIL,KAAK,SAAAb,GAAI,OAAI6B,EAAK5E,SAAS,CACnCoE,MAAOrB,EAAKqB,MACZC,YAAatB,EAAKsB,YAClB8B,OAAQpD,EAAKoD,OACbC,OAAQrD,EAAKqD,OACbnC,GAAIA,uCAKP,IAAAuD,EAAAnJ,KACL,OACIC,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACC,OAAQ,MACrBZ,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KAASvD,KAAK8F,MAAMC,OAAS,mBAC7B9F,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACwI,kBAAmB,WAC5BnJ,EAAAC,EAAAC,cAACkJ,EAAAnJ,EAAD,CAAeoJ,OAAQtJ,KAAK8F,MAAME,aAAe,mCAErD/F,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACC,OAAQ,MACrBZ,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAMC,UAAQ,GACVhD,EAAAC,EAAAC,cAAC6C,EAAA,EAAKsB,IAAN,KACIrE,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,CAAaG,SAAU,EAAGD,OAAQ,GAAID,OAAQ,IAE1CnD,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAASC,OAAK,EAACC,QAAM,EAAC9F,MAAO,CAACsC,QAAS,KACnCjD,EAAAC,EAAAC,cAACwG,EAAA,EAAD,KAEQ3G,KAAK8F,MAAMgC,OAAO7G,IAAI,SAAA2H,GAAK,OACvB3I,EAAAC,EAAAC,cAACwG,EAAA,EAAKS,MAAN,CAAYC,QAAM,EAACrG,IAAK4H,GACpB3I,EAAAC,EAAAC,cAAA,aAAQyI,GAEJZ,OAAAG,EAAA,EAAAH,CAAIuB,MAAM,GAAGC,QAAQvI,IAAI,SAAA4H,GAAM,OAC3B5I,EAAAC,EAAAC,cAACwG,EAAA,EAAKC,MAAN,CACI5F,IAAK6H,EACLhC,QAAS4C,IACTxC,MAAO4B,EACP7B,MAAO6B,EACP9H,KAAM6H,EACN7B,SAAU,SAACvF,EAADH,GAAA,IAAK2F,EAAL3F,EAAK2F,MAAL,OAAgBmC,EAAKR,kBAAkB3B,EAAO4B,EAAOC,IAC/DhB,QAASsB,EAAKrD,MAAM4C,QAAQE,KAAWC,SAO/D5I,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAQ,SAAAK,GAAA,IAAEH,EAAFG,EAAEH,QAAF,OACXrB,EAAAC,EAAAC,cAACwG,EAAA,EAAKC,MAAN,CAAYC,QAAS1C,IACT5C,QAAS,WACL,IAAMmH,EAAUS,EAAKrD,MAAM4C,QAC3B/C,EAAQwD,EAAKrD,MAAMiC,QAAQxC,KACvB,SAAAqC,GAAI,OF/DrChC,EE+DoDuD,EAAKrD,MAAMiC,OF/D3DrD,EE+DmE,CAClCqD,OAAQC,OAAOC,OAAPC,MAAAF,OAAM,CAAQ,IAARV,OAAAU,OAAAG,EAAA,EAAAH,CAAeA,OAAOwB,KAAKd,GAASzH,IAAI,SAAAmH,GAAC,OAAAJ,OAAAK,EAAA,EAAAL,CAAA,GAAOI,EAAIR,EAAKG,OAAOK,GAAKM,EAAQN,SAC3FE,aAAcV,EAAKU,aAAe,GFhEvF3D,MAAM,+BAAiCiB,EAAI,CAC9ChB,OAAQ,MAAOC,KAAM,OAAQC,MAAO,WAAYC,YAAa,cAC7DC,QAAS,CAACC,eAAgB,mCAC1BC,SAAU,SAAUC,SAAU,cAAeC,KAAMC,KAAKC,UAAUZ,KACnEa,KAAK,SAAAC,GAAC,OAAEA,EAAEd,SALV,IAAoBkB,EAAIlB,IEmE2Ba,KAAK,SAAAC,GACHlE,EAAQI,KAAK,gBAAkByH,EAAKrD,MAAMF,OAGlD4C,SAAUR,OAAOwB,KAAKL,EAAKrD,MAAM4C,SAASjB,SAAW0B,EAAKrD,MAAMgC,OAAOL,QAZnF,4BApEF1F,sBCAjB2H,6MACjB5D,MAAQ,CACJC,MAAO,GACPC,YAAa,GACb8B,OAAQ,GACR6B,WAAY,CAAC5B,OAAQ,IACrBnC,GAAI,GACJgE,OAAO,EACPtD,SAAS,EACTuD,OAAQ,MAGZC,WAAa,SAAAlE,GACTA,EAAKA,GAAM,GACX7F,EAAK4B,SAAS,CAAC2E,SAAS,EAAMV,GAAIA,EAAIgE,OAAO,IAE3B,IAAdhE,EAAG6B,OAKP9B,EAAQC,GAAIL,KAAK,SAAAb,GASb,YARoBoE,IAAhBpE,EAAKoD,aAAwCgB,IAAhBpE,EAAKqD,QAClChI,EAAK4B,SAAS,CAACiI,OAAO,EAAMhE,GAAI,KAEpC7F,EAAK4B,SAAS,CACVoE,MAAOrB,EAAKqB,MACZC,YAAatB,EAAKsB,YAClB8B,OAAQpD,EAAKoD,SAEVnC,EAAQjB,EAAKqD,UACrBxC,KAAK,SAAAqC,GACJ7H,EAAK4B,SAAS,CAACgI,WAAY/B,EAAMtB,SAAS,MAC3CyD,MAAM,SAAAvI,GACLzB,EAAK4B,SAAS,CAACiI,OAAO,EAAMtD,SAAS,EAAOV,GAAI,OAjBhD7F,EAAK4B,SAAS,CAAC2E,SAAS,OAoBhC0D,eAAiB,WACb,IAAMC,EAAQlB,IAAYC,MAAMjJ,EAAKmC,MAAM+G,SAASC,QAAQtD,GACxDqE,IAAUlK,EAAK+F,MAAMF,IACrB7F,EAAK+J,WAAWG,GAEpB,IAAMlC,EAAShI,EAAK+F,MAAM6D,WAAW5B,QAAU,GACzCmC,EAA0C,IAA/BlC,OAAOwB,KAAKzB,GAAQN,OAAe,EAAI0C,KAAKC,IAALlC,MAAAiC,KAAInC,OAAAG,EAAA,EAAAH,CAAQA,OAAOqC,OAAOtC,KAC5EuC,EAAS,CACX,SAAU,SAAU,QAAS,OAAQ,OACrC,SAAU,SAAU,OAAQ,QAAS,OAAQ,SAEjD,YAA0BxB,IAAtB/I,EAAK+F,MAAMgC,OACJ,GAEJ,CACH/H,EAAK+F,MAAMgC,OAAO7G,IAAI,SAAC2H,EAAOrB,GAC1B,OAAOtH,EAAAC,EAAAC,cAACoK,EAAA,EAAD,CAAUC,SAAS,QAAQxJ,IAAK4H,EACtB5B,MAAOe,EAAOa,IAAU,EAAG6B,MAAOP,EAClC7H,MAAOiI,EAAO/C,EAAI+C,EAAO7C,SAAUmB,KAExD3I,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAQ5C,QAAS,kBAAMxB,EAAK+J,WAAW/J,EAAK+F,MAAMF,KAAKzD,MAAI,EAACuI,cAAc,QAClElC,SAAUzI,EAAK+F,MAAMQ,SAD7B,UAGIrG,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMrB,KAAK,iBAIvB4J,gBAAkB,WACd,OAAO1K,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAC2G,EAAA,EAAD,CAAOL,OAAK,EAACmE,MAAO7K,EAAK+F,MAAM8D,MAAOiB,KAAK,OAAO7D,MAAOjH,EAAK+F,MAAM+D,OAAQiB,QAAM,EAC3E5D,YAAY,eAAeH,SAAU,SAAAvF,GAAC,OAAIzB,EAAK4B,SAAS,CAACkI,OAAQrI,EAAEe,OAAOyE,UAC7E/G,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAQ,SAAAF,GAAA,IAAEI,EAAFJ,EAAEI,QAAF,OAAerB,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAQ5C,QAAS,WACvDD,EAAQI,KAAK,gBAAkB3B,EAAK+F,MAAM+D,QAC1C9J,EAAK+J,WAAW/J,EAAK+F,MAAM+D,UAFW,oGAS9C7J,KAAK8J,WAAWf,IAAYC,MAAMhJ,KAAKkC,MAAM+G,SAASC,QAAQtD,qCAI9D,OACI3F,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACC,OAAQ,MACrBZ,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KAASvD,KAAK8F,MAAMC,OAAS,aAC7B9F,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACwI,kBAAmB,WAC5BnJ,EAAAC,EAAAC,cAACkJ,EAAAnJ,EAAD,CAAeoJ,OAAQtJ,KAAK8F,MAAME,aAAe,oCAErD/F,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACC,OAAQ,MACrBZ,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAMC,UAAQ,GACVhD,EAAAC,EAAAC,cAAC6C,EAAA,EAAKsB,IAAN,KACIrE,EAAAC,EAAAC,cAAC6C,EAAA,EAAKG,OAAN,CAAaG,SAAU,EAAGD,OAAQ,GAAID,OAAQ,IAC1CnD,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAASE,QAAM,EAAC9F,MAAO,CAACsC,QAAS,KAC5BlD,KAAK8F,MAAMF,GAAK5F,KAAKgK,iBAAmBhK,KAAK2K,8BA9FpC5I,aCErBgJ,mLAEb,OACI9K,EAAAC,EAAAC,cAAC6K,EAAA,EAAD,KACI/K,EAAAC,EAAAC,cAAA,OAAK+D,UAAU,YACXjE,EAAAC,EAAAC,cAAA,OAAK+D,UAAU,gBACXjE,EAAAC,EAAAC,cAAA,OAAK+D,UAAU,cACXjE,EAAAC,EAAAC,cAAC8K,EAAD,CAAQjK,IAAI,YAEhBf,EAAAC,EAAAC,cAAA,OAAK+D,UAAU,QACXjE,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOH,IAAK,EAAGkK,OAAK,EAACC,KAAK,IAAIC,UAAW3H,IACzCxD,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOH,IAAK,EAAGkK,OAAK,EAACC,KAAK,cAAcC,UAAWvF,IACnD5F,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOH,IAAK,EAAGkK,OAAK,EAACC,KAAK,QAAQC,UAAW3C,IAC7CxI,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOH,IAAK,EAAGkK,OAAK,EAACC,KAAK,YAAYC,UAAW1B,MAGzDzJ,EAAAC,EAAAC,cAACkL,EAAD,CAAQrK,IAAI,oBAhBCe,aCFbuJ,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2DCVNC,IAAStK,OAAOnB,EAAAC,EAAAC,cAACwL,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzG,KAAK,SAAA0G,GACjCA,EAAaC","file":"static/js/main.b2de3860.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Container, Image, Menu} from 'semantic-ui-react';\nimport {Route} from \"react-router-dom\";\n\n\nexport default class Navbar extends Component {\n    render() {\n        return <Menu stackable size='massive'>\n            <Container>\n                <Menu.Item href='#'>\n                    <Image src='images/logo.png' style={{height: 30}}/>\n                </Menu.Item>\n                <Menu.Item href='#'>\n                    Votosphere\n                </Menu.Item>\n\n                <Menu.Menu position='right'>\n                    {[\n                        {name: '+', key: '/createPoll'},\n                        {name: 'View', key: 'viewPoll'}\n                    ].map(({name, key}) => (\n                        <Route key={key} render={({history}) => (\n                            <Menu.Item\n                                onClick={(e, {name}) => {\n                                    history.push(key);\n                                    this.setState({activeItem: name});\n                                }}\n                                active={false}\n                                name={key}\n                                content={name}\n                            />\n                        )}/>\n                    ))}\n                </Menu.Menu>\n            </Container>\n        </Menu>\n            ;\n    }\n}\n","import React, {Component} from 'react';\nimport {Container, Grid, Header, Icon, Menu, Popup} from 'semantic-ui-react';\n\n\nclass Social extends Component {\n    render() {\n        const fake = this.props.href === \"#\";\n        const icon = <Icon name={this.props.name} size='huge' style={{color: '#777777'}}/>;\n        const inner = fake ? icon : <a href={this.props.href} target='_blank' rel='noopener noreferrer'>{icon}</a>;\n        return fake ? (\n            <Popup trigger={inner} content={\"We don't actually have a page on \" + this.props.name + \" yet.\"}/>\n        ) : inner;\n    }\n}\n\nexport default class Footer extends Component {\n    render() {\n        return [\n            <div style={{height: 40}}/>,\n            <Menu attached='bottom' style={{backgroundColor: '#F5F5F5'}}>\n                <Container style={{alignContent: 'center', textAlign: 'center'}}>\n                    <Grid centered stackable style={{padding: 40}}>\n                        <Grid.Column mobile={16} tablet={4} computer={4}>\n                            <Header>\n                                About Us\n                            </Header>\n                            <p>\n                                We are a platform for creating quick, simple polls. You can find more info about the\n                                project on GitHub.\n                            </p>\n                        </Grid.Column>\n                        <Grid.Column mobile={16} tablet={4} computer={4}>\n                            <Header>\n                                Social\n                            </Header>\n                            <Social name='twitter' href=\"#\"/>\n                            <Social name='facebook' href=\"#\"/>\n                            <Social name='github' href='https://github.com/matthewscholefield/Votosphere'/>\n                            <Social name='youtube' href='#'/>\n                        </Grid.Column>\n                        <Grid.Column mobile={16} tablet={4} computer={4}>\n                            <Header>\n                                More Info\n                            </Header>\n                            <p>Votosphere is a simple platform to create polls. The description is rendered as\n                                markdown.</p>\n                            <p>© 2018 Matthew Scholefield</p>\n                        </Grid.Column>\n                    </Grid>\n                </Container>\n            </Menu>\n        ];\n    }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Button, Container, Grid, Header, Icon} from 'semantic-ui-react';\nimport {Route} from \"react-router-dom\";\nimport {Parallax} from 'react-parallax';\n\n\nexport default class IntroPage extends Component {\n    render() {\n        return <div>\n            <Parallax\n                blur={0}\n                bgImage={'images/bg.jpg'}\n                bgImageAlt=\"Background\"\n                strength={200}\n            >\n                <Container text style={{color: '#fffffff'}}>\n                    <div key='spacer' style={{height: 100}}/>\n                    <Header as='h1' inverted className='white'>Votosphere</Header>\n                    <p className='inverted'>\n                        A simple poll creator.\n                    </p>\n                    <Route render={({history}) =>\n                        <Button primary onClick={() => history.push('/createPoll')}>Create a Poll </Button>\n                    }/>\n                    <div key='spacer' style={{height: 100}}/>\n                </Container>\n            </Parallax>\n            <div style={{height: 40}}/>\n            <Container text>\n                <Grid padded>\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            <Header as='h2' icon>\n                                <Icon name='users'/>\n                                Open Source\n                                <Header.Subheader>Want to learn more? You can view all of the source code on\n                                    GitHub.</Header.Subheader>\n                            </Header>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Header as='h2' icon>\n                                <Icon name='tv'/>\n                                Simple\n                                <Header.Subheader>Created with ease of use in mind, you can make new polls in a matter\n                                    of\n                                    seconds.</Header.Subheader>\n                            </Header>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Header as='h2' icon>\n                                <Icon name='check'/>\n                                Refreshing\n                                <Header.Subheader>A UI that gets out of your way while still looking like it's from this\n                                    decade.</Header.Subheader>\n                            </Header>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        </div>;\n    }\n}\n","/**\n * Uploads and returns id of new json\n * @param json Input data\n * @returns {Promise<string>} Id\n */\nexport function uploadJson(json) {\n    return fetch('https://api.myjson.com/bins', {\n        method: \"POST\", mode: \"cors\", cache: \"no-cache\", credentials: \"same-origin\",\n        headers: {\"Content-Type\": \"application/json; charset=utf-8\"},\n        redirect: \"follow\", referrer: \"no-referrer\", body: JSON.stringify(json),\n    }).then(r=>r.json()).then(r=>r.uri.replace(\"https://api.myjson.com/bins/\", \"\"));\n}\n\n/**\n * Updates an existing json\n * @param id Corresponds to existing id\n * @param json New data to replace the current version with\n * @returns {Promise<any>} Response\n */\nexport function updateJson(id, json) {\n    return fetch('https://api.myjson.com/bins/' + id, {\n        method: \"PUT\", mode: \"cors\", cache: \"no-cache\", credentials: \"same-origin\",\n        headers: {\"Content-Type\": \"application/json; charset=utf-8\"},\n        redirect: \"follow\", referrer: \"no-referrer\", body: JSON.stringify(json),\n    }).then(r=>r.json());\n}\n\n/**\n * Return a json corresponding to the given id\n * @param id Id of json\n * @returns {Promise<any>} Json data\n */\nexport function getJson(id) {\n    return fetch('https://api.myjson.com/bins/' + id, {\n        method: \"GET\", mode: \"cors\", cache: \"no-cache\", credentials: \"same-origin\",\n        headers: {\"Content-Type\": \"application/json; charset=utf-8\"},\n        redirect: \"follow\", referrer: \"no-referrer\",\n    }).then(r=>r.json());\n}\n","import React, {Component} from \"react\";\nimport {Button, Checkbox, Container, Form, Grid, Header, Input, Popup, Segment, TextArea} from \"semantic-ui-react\";\nimport './App.css';\nimport {uploadJson} from '../api';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Route} from \"react-router-dom\";\n\n\nexport default class CreatePollPage extends Component {\n    state = {\n        title: '',\n        description: '',\n        numFields: 1,\n        fieldNames: [],\n        agreed: false,\n        submitting: false,\n        pollUrl: '',\n        loading: false\n    };\n\n    render() {\n        return (\n            <Container>\n                <div style={{height: 40}}/>\n                <Header>Create Poll</Header>\n                <Grid centered>\n                    <Grid.Row>\n                        <Grid.Column computer={6} tablet={12} mobile={16}>\n                            <Segment fluid raised style={{padding: 20}}>\n                                <Form>\n                                    <Form.Field control={Input} onChange={e => this.setState({title: e.target.value})}\n                                                label='Title' placeholder='Title...'/>\n                                    <Form.Field control={TextArea}\n                                                onChange={e => this.setState({description: e.target.value})}\n                                                label='Description' placeholder='Description...'/>\n                                    <Form.Group inline>\n                                        <label>Poll Options</label>\n                                    </Form.Group>\n                                    {\n                                        this.state.fieldNames.concat(['']).map((name, i) => (\n                                            <Form.Field key={i} control={Input} label={'Option ' + (i + 1)}\n                                                        value={name}\n                                                        placeholder='New poll option...'\n                                                        onChange={(event) => {\n                                                            const text = event.target.value;\n\n                                                            this.setState(state => {\n                                                                if (text.length > 0) {\n                                                                    state.fieldNames[i] = text;\n                                                                } else {\n                                                                    state.fieldNames.splice(i);\n                                                                }\n                                                                return state;\n                                                            })\n                                                        }}/>\n                                        ))\n                                    }\n\n                                    <Form.Field>\n                                        <Popup trigger={\n                                            <Checkbox label='I agree to the Terms and Conditions'\n                                                      onChange={(event, data) => {\n                                                          this.setState({agreed: data.checked})\n                                                      }}\n                                            />}\n                                               content='You agree to use this service in a way that breaks no laws and is not evil.'/>\n                                    </Form.Field>\n                                    <Route render={({history}) => (\n                                        <Form.Field>\n                                            <Button onClick={() => {\n                                                this.setState({loading: true});\n                                                const fields = this.state.fieldNames;\n                                                const initialCounts = Object.assign({}, ...fields.map(k => ({[k]: 0})));\n                                                uploadJson({\n                                                    counts: initialCounts,\n                                                    numResponses: 0\n                                                }).then(countsId => uploadJson({\n                                                    title: this.state.title,\n                                                    description: this.state.description,\n                                                    fields: this.state.fieldNames,\n                                                    counts: countsId\n                                                })).then(id => {\n                                                    history.push(\"/poll?id=\" + id);\n                                                });\n                                            }} disabled={!this.state.agreed || this.state.loading || (\n                                                !this.state.title.length > 0 || !this.state.fieldNames.length > 0\n                                            )}>\n                                                Create\n                                            </Button>\n                                        </Form.Field>\n                                    )}/>\n                                </Form>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport queryString from \"query-string\";\nimport './App.css';\nimport {getJson, updateJson} from '../api';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Button, Container, Form, Grid, Header, Radio, Segment} from 'semantic-ui-react';\nimport {Route} from \"react-router-dom\";\nimport ReactMarkdown from 'react-markdown'\n\n\nexport default class PollPage extends Component {\n\n    state = {\n        title: \"\",\n        description: \"\",\n        fields: [],\n        choices: {},\n        counts: \"\",\n        id: \"\"\n    };\n    handleRadioUpdate = (value, field, amount) => {\n        if (value !== undefined) {\n            this.setState(({choices}) => {\n                choices[field] = amount;\n                return {choices: choices};\n            })\n        }\n    };\n\n    componentWillMount() {\n        const id = queryString.parse(this.props.location.search).id;\n        if (id !== undefined) {\n            getJson(id).then(json => this.setState({\n                title: json.title,\n                description: json.description,\n                fields: json.fields,\n                counts: json.counts,\n                id: id\n            }));\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <div style={{height: 40}}/>\n                <Header>{this.state.title || \"Respond to Poll\"}</Header>\n                <div style={{listStylePosition: 'inside'}}>\n                    <ReactMarkdown source={this.state.description || \"Respond to a Poll from a link\"}/>\n                </div>\n                <div style={{height: 20}}/>\n                <Grid centered>\n                    <Grid.Row>\n                        <Grid.Column computer={6} tablet={12} mobile={16}>\n\n                            <Segment fluid raised style={{padding: 20}}>\n                                <Form>\n                                    {\n                                        this.state.fields.map(field => (\n                                            <Form.Group inline key={field}>\n                                                <label>{field}</label>\n                                                {\n                                                    [...Array(3).keys()].map(amount => (\n                                                        <Form.Field\n                                                            key={amount}\n                                                            control={Radio}\n                                                            label={amount}\n                                                            value={amount}\n                                                            name={field}\n                                                            onChange={(e, {value}) => this.handleRadioUpdate(value, field, amount)}\n                                                            checked={this.state.choices[field] === amount}\n                                                        />\n                                                    ))\n                                                }\n                                            </Form.Group>\n                                        ))\n                                    }\n                                    <Route render={({history}) => (\n                                        <Form.Field control={Button}\n                                                    onClick={() => {\n                                                        const choices = this.state.choices;\n                                                        getJson(this.state.counts).then(\n                                                            data => updateJson(this.state.counts, {\n                                                                counts: Object.assign({}, ...Object.keys(choices).map(k => ({[k]: data.counts[k] + choices[k]}))),\n                                                                numResponses: data.numResponses + 1\n                                                            })\n                                                        ).then(r => {\n                                                            history.push(\"/viewPoll?id=\" + this.state.id);\n                                                        });\n                                                    }}\n                                                    disabled={Object.keys(this.state.choices).length !== this.state.fields.length}\n                                        >\n                                            Continue\n                                        </Form.Field>\n                                    )}/>\n                                </Form>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport queryString from \"query-string\";\nimport './App.css';\nimport {getJson} from '../api';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Button, Container, Grid, Header, Icon, Input, Progress, Segment} from 'semantic-ui-react';\nimport {Route} from \"react-router-dom\";\nimport ReactMarkdown from 'react-markdown';\n\n\nexport default class ViewPollPage extends Component {\n    state = {\n        title: \"\",\n        description: \"\",\n        fields: [],\n        countsData: {counts: {}},\n        id: \"\",\n        badId: false,\n        loading: true,\n        idText: \"\"\n    };\n\n    updateData = id => {\n        id = id || \"\";\n        this.setState({loading: true, id: id, badId: false});\n\n        if (id.length === 0) {\n            this.setState({loading: false});\n            return;\n        }\n\n        getJson(id).then(json => {\n            if (json.fields === undefined || json.counts === undefined) {\n                this.setState({badId: true, id: \"\"});\n            }\n            this.setState({\n                title: json.title,\n                description: json.description,\n                fields: json.fields,\n            });\n            return getJson(json.counts);\n        }).then(data => {\n            this.setState({countsData: data, loading: false})\n        }).catch(e => {\n            this.setState({badId: true, loading: false, id: \"\"})\n        });\n    };\n    renderPollView = () => {\n        const urlId = queryString.parse(this.props.location.search).id;\n        if (urlId !== this.state.id) {\n            this.updateData(urlId);\n        }\n        const counts = this.state.countsData.counts || {};\n        const maxCount = Object.keys(counts).length === 0 ? 1 : Math.max(...Object.values(counts));\n        const colors = [\n            'orange', 'yellow', 'olive', 'teal', 'blue',\n            'violet', 'purple', 'pink', 'brown', 'grey', 'black'\n        ];  // 'red', 'green' Too misleading\n        if (this.state.fields === undefined) {\n            return [];\n        }\n        return [\n            this.state.fields.map((field, i) => {\n                return <Progress progress='value' key={field}\n                                 value={counts[field] || 0} total={maxCount}\n                                 color={colors[i % colors.length]}>{field}</Progress>\n            }),\n            <Button onClick={() => this.updateData(this.state.id)} icon labelPosition='right'\n                    disabled={this.state.loading}>\n                Refresh\n                <Icon name='refresh'/>\n            </Button>\n        ];\n    };\n    renderAskIdView = () => {\n        return <div>\n            <p>Enter poll id:</p>\n            <Input fluid error={this.state.badId} type='text' value={this.state.idText} action\n                   placeholder='ie. pc9z1...' onChange={e => this.setState({idText: e.target.value})}>\n                <input/><Route render={({history}) => <Button onClick={() => {\n                history.push(\"/viewPoll?id=\" + this.state.idText);\n                this.updateData(this.state.idText);\n            }}>Submit</Button>}/>\n            </Input>\n        </div>;\n    };\n\n    componentWillMount() {\n        this.updateData(queryString.parse(this.props.location.search).id);\n    }\n\n    render() {\n        return (\n            <Container>\n                <div style={{height: 40}}/>\n                <Header>{this.state.title || \"View Poll\"}</Header>\n                <div style={{listStylePosition: 'inside'}}>\n                    <ReactMarkdown source={this.state.description || \"View stats on an existing poll\"}/>\n                </div>\n                <div style={{height: 20}}/>\n                <Grid centered>\n                    <Grid.Row>\n                        <Grid.Column computer={6} tablet={12} mobile={16}>\n                            <Segment raised style={{padding: 20}}>\n                                {this.state.id ? this.renderPollView() : this.renderAskIdView()}\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\nimport {HashRouter, Route} from \"react-router-dom\";\nimport IntroPage from \"./IntroPage\";\nimport CreatePollPage from './CreatePollPage';\nimport PollPage from './PollPage';\nimport ViewPollPage from './ViewPollPage';\n\n\nexport default class App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <div className=\"App Site\">\n                    <div className=\"Site-content\">\n                        <div className=\"App-header\">\n                            <Navbar key='navbar'/>\n                        </div>\n                        <div className=\"main\">\n                            <Route key={1} exact path=\"/\" component={IntroPage}/>\n                            <Route key={2} exact path=\"/createPoll\" component={CreatePollPage}/>\n                            <Route key={3} exact path=\"/poll\" component={PollPage}/>\n                            <Route key={4} exact path=\"/viewPoll\" component={ViewPollPage}/>\n                        </div>\n                    </div>\n                    <Footer key='footer'/>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}